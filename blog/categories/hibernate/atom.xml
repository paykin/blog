<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hibernate | Programming Notes]]></title>
  <link href="http://test.paykin.info/blog/categories/hibernate/atom.xml" rel="self"/>
  <link href="http://test.paykin.info/"/>
  <updated>2013-09-26T18:22:54+03:00</updated>
  <id>http://test.paykin.info/</id>
  <author>
    <name><![CDATA[Dmitry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spell checking with suggestions with Hibernate Search 4 and Lucene 3.6]]></title>
    <link href="http://test.paykin.info/blog/2012/04/26/spell-check-suggestions-hibernate-search-lucene/"/>
    <updated>2012-04-26T00:00:00+03:00</updated>
    <id>http://test.paykin.info/blog/2012/04/26/spell-check-suggestions-hibernate-search-lucene</id>
    <content type="html"><![CDATA[<p>In latest releases of Hibernate Search 4 and Lucene 3.6 there was some changes in SpellChecker API&rsquo;s.
Here is example of the new API that allows to use spell checking with suggested words:
``` java
public String[] getSuggestions(String txt){</p>

<pre><code>String[] suggestions = Â new String[]{};

FullTextSession fullTextSession = Search.getFullTextSession(sf.getCurrentSession());
SearchFactory searchFactory = fullTextSession.getSearchFactory();
IndexReader reader = searchFactory.getIndexReaderAccessor().open(MyEntity.class);
try {
    FSDirectory spellCheckerDir = FSDirectory.open(new File("D:\lucene\spellchecker\com.site.model.MyEntity"));
    SpellChecker spellChecker = new SpellChecker(spellCheckerDir);
    Dictionary dictionary = new LuceneDictionary(reader, "description");
    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_35, searchFactory.getAnalyzer("myAnalyzer"));
    spellChecker.indexDictionary(dictionary, config, true);
    suggestions = spellChecker.suggestSimilar(txt, 10);
} catch (Exception e) {
    e.printStackTrace();
}
finally{
    searchFactory.getIndexReaderAccessor().close(reader);
}
return suggestions;
</code></pre>

<p>}
```
<code>sf.getCurrentSession()</code> gets standard Hibernate session. If you use <code>EntityManager</code>, there exists a method to obtain <code>FullTextSession</code>.
The example creates new index directory dedicated to spell checking. It adds terms from MyEntity&rsquo;s <code>description</code> field to the index. <code>spellChecker.indexDictionary</code> adds the terms to the index, and optionally merges it with existing index.</p>
]]></content>
  </entry>
  
</feed>
