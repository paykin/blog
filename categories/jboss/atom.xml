<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JBoss | Programming Notes]]></title>
  <link href="http://java.paykin.info/categories/jboss/atom.xml" rel="self"/>
  <link href="http://java.paykin.info/"/>
  <updated>2013-09-26T22:17:54+03:00</updated>
  <id>http://java.paykin.info/</id>
  <author>
    <name><![CDATA[Dmitry Paykin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating HornetQ with Camel and Spring]]></title>
    <link href="http://java.paykin.info/hornetq-camel-spring/"/>
    <updated>2012-12-13T00:00:00+02:00</updated>
    <id>http://java.paykin.info/hornetq-camel-spring</id>
    <content type="html"><![CDATA[<p>Since Apache Camel have only one built-in implementation for specific JMS provider &ndash; ActiveMQ, you have to use generic org.apache.camel.component.jms.JmsConfiguration.
In order to work with HornetQ with Camel and Spring first you have to add HornetQ dependencies to Maven pom.xml:
``` xml
<dependency></p>

<pre><code>&lt;groupId&gt;org.hornetq&lt;/groupId&gt;
&lt;artifactId&gt;hornetq-jms&lt;/artifactId&gt;
&lt;version&gt;${hornetq.version}&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.hornetq&lt;/groupId&gt;
&lt;artifactId&gt;hornetq-jms-client&lt;/artifactId&gt;
&lt;version&gt;${hornetq.version}&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.hornetq&lt;/groupId&gt;
&lt;artifactId&gt;hornetq-core-client&lt;/artifactId&gt;
&lt;version&gt;${hornetq.version}&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.jboss.netty&lt;/groupId&gt;
&lt;artifactId&gt;netty&lt;/artifactId&gt;
&lt;version&gt;3.2.7.Final&lt;/version&gt;
</code></pre>

<p></dependency>
```
After that modify your spring.xml. Here is an example:</p>

<!--more-->


<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;beans xmlns=&ldquo;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&rdquo;</p>

<pre><code>   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;
&lt;bean id="hornetqServerLocatorFactory" class="com.example.HornetqServerLocatorFactory" /&gt;
&lt;bean id="hornetqServerLocator" factory-bean="hornetqServerLocatorFactory" factory-method="createServerLocator"/&gt;
&lt;bean id="hornetqJmsConnectionFactory" class="org.hornetq.jms.client.HornetQJMSConnectionFactory"&gt;
    &lt;constructor-arg name="serverLocator" ref="hornetqServerLocator"/&gt;
&lt;/bean&gt;
&lt;bean id="hornetqJmsConfig" class="org.apache.camel.component.jms.JmsConfiguration"&gt;
    &lt;property name="connectionFactory" ref="hornetqJmsConnectionFactory"/&gt;
    &lt;property name="transacted" value="false"/&gt;
    &lt;property name="requestTimeout" value="60000"/&gt;
&lt;/bean&gt;
&lt;bean id="hornetq" class="org.apache.camel.component.jms.JmsComponent"&gt;
    &lt;property name="configuration" ref="hornetqJmsConfig"/&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
<code>
And the last thing is to write your implementation of HornetqServerLocatorFactory. If you wish to configure HornetQ host and port from spring.xml, you can easily do it - just put them as members of the class and inject them via Spring.xml.
</code> java</p>

<pre><code>package com.example;
import java.util.HashMap;
import java.util.Map;
import org.hornetq.api.core.TransportConfiguration;
import org.hornetq.api.core.client.HornetQClient;
import org.hornetq.api.core.client.ServerLocator;
import org.hornetq.core.remoting.impl.netty.NettyConnectorFactory;
import org.springframework.beans.factory.annotation.Configurable;
@Configurable
public class HornetqServerLocatorFactory {
    public ServerLocator createServerLocator() {
        final Map&lt;String, Object&gt; connectionParams = new HashMap&lt;String, Object&gt;();
        connectionParams.put( "port", "hornetq-host.com" );
        connectionParams.put( "host", 5900 );
        final TransportConfiguration transportConfiguration = new TransportConfiguration( NettyConnectorFactory.class.getName(), connectionParams );
        final ServerLocator serverLocator = HornetQClient.createServerLocatorWithoutHA( new TransportConfiguration[] { transportConfiguration } );
        return serverLocator;
    }
}
</code></pre>

<p>```
That&rsquo;s it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create datasource programmatically on JBoss 7]]></title>
    <link href="http://java.paykin.info/add-datasource-programaticaly-cli-jboss-7/"/>
    <updated>2011-11-24T00:00:00+02:00</updated>
    <id>http://java.paykin.info/add-datasource-programaticaly-cli-jboss-7</id>
    <content type="html"><![CDATA[<p>In order to create new datasource programmatically on JBoss 7 without restart (on the fly) from Java you can use CLI Java API. You have to include jboss-as-controller-client to your project dependencies:
``` xml
<dependency></p>

<pre><code>&lt;groupId&gt;org.jboss.as&lt;/groupId&gt;
&lt;artifactId&gt;jboss-as-controller-client&lt;/artifactId&gt;
&lt;version&gt;7.0.2.Final&lt;/version&gt;
</code></pre>

<p></dependency>
```
The following example creates new datasource:</p>

<!--more-->


<p>``` java</p>

<pre><code>public void createDatasource() throws Exception{
    ModelNode request = new ModelNode();
    request.get(ClientConstants.OP).set(ClientConstants.ADD);
    request.get(ClientConstants.OP_ADDR).add("subsystem",
            "datasources");
    request.get(ClientConstants.OP_ADDR).add("data-source",
            "java:jboss/datasources/NewDatasource");
    request.get("jndi-name").set("java:jboss/datasources/NewDatasource");
    request.get("connection-url").set("jdbc:as400://1.2.3.4/SCHEME");
    request.get("driver-class").set("com.ibm.as400.access.AS400JDBCDriver");
    request.get("driver-name").set("jt400.jar");
    request.get("user-name").set("username");
    request.get("password").set("password");
    request.get("pool-name").set("pool_NewDatasource");
    ModelControllerClient client = ModelControllerClient.Factory.create(
            InetAddress.getByName("127.0.0.1"), 9999);
    client.execute(new OperationBuilder(request).build());
}
</code></pre>

<p><code>
If you want to check if the datasource already exists, consider following snippet:
</code> java</p>

<pre><code>public boolean checkIfDatasourceExists() throws Exception {
    ModelNode request = new ModelNode();
    request.get(ClientConstants.OP).set("read-resource");
    request.get("recursive").set(false);
    request.get(ClientConstants.OP_ADDR).add("subsystem", "datasources");
    ModelControllerClient client = ModelControllerClient.Factory.create(
            InetAddress.getByName("127.0.0.1"), 9999);
    ModelNode responce = client.execute(new OperationBuilder(request).build());
    ModelNode datasources = responce.get(ClientConstants.RESULT).get("data-source");
    if (datasources.isDefined()) {
        for (ModelNode dataSource : datasources.asList()) {
            String dataSourceName = dataSource.asProperty().getName();
            if (dataSourceName.equals("java:jboss/datasources/NewDatasource")) {
                return true;
            }
        }
    }
    return false;
}
</code></pre>

<p>```
The examples have the same effect as trying to add datasource from Jboss Administration console.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forcing JBoss 7 to apply changes to JSP's immediately]]></title>
    <link href="http://java.paykin.info/jboss-7-changes-jsp/"/>
    <updated>2011-10-27T00:00:00+02:00</updated>
    <id>http://java.paykin.info/jboss-7-changes-jsp</id>
    <content type="html"><![CDATA[<p>JBoss AS 7 by default do not reflect any changes to JSP files in WAR deployment. So, during application development you have to redeploy WAR or restart JBoss. In order to change this behaviour it is necessary to change section of  in  so it looks like:
``` xml</p>

<pre><code>&lt;configuration&gt;
    &lt;jsp-configuration development="true"/&gt;
&lt;/configuration&gt;
...
</code></pre>

<p>```
And now JBoss behaves as you expect it in development mode: all changes to JSP files are loaded automatically as soon as you change the JSP file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying JDBC driver in JBoss Maven plugin]]></title>
    <link href="http://java.paykin.info/deploying-jdbc-jboss-maven-plugin/"/>
    <updated>2011-09-25T00:00:00+03:00</updated>
    <id>http://java.paykin.info/deploying-jdbc-jboss-maven-plugin</id>
    <content type="html"><![CDATA[<p>With release of jboss-as maven plugin version 7.0.1.Final the new goal deploy-artifact is added. It allows to deploy additional artifacts to JBoss server, like JDBC DB driver JAR.
After trying do deploy JDBC driver with jboss-as maven plugin using following code in pom.xml I received the <code>NullPointerException</code> in Maven build.
Here is part of maven pom.xml used to deploy the driver to jboss:
``` xml           <br/>
<plugin></p>

<pre><code>&lt;groupId&gt;org.jboss.as.plugins&lt;/groupId&gt;
&lt;artifactId&gt;jboss-as-maven-plugin&lt;/artifactId&gt;
&lt;version&gt;7.0.1.Final&lt;/version&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;deploy-driver-AS400&lt;/id&gt;
        &lt;phase&gt;package&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;deploy-artifact&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
            &lt;hostname&gt;${jboss-hostname}&lt;/hostname&gt;
            &lt;groupId&gt;com.ibm&lt;/groupId&gt;
            &lt;artifactId&gt;as400&lt;/artifactId&gt;
            &lt;fileName&gt;jt400.jar&lt;/fileName&gt;
            &lt;name&gt;jt400.jar&lt;/name&gt;
        &lt;/configuration&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
</code></pre>

<p></plugin>
```               <br/>
In the plugin&rsquo;s manual at <a href="http://docs.jboss.org/jbossas/7/plugins/maven/latest/examples/deployment-example.html"><a href="http://docs.jboss.org/jbossas/7/plugins/maven/latest/examples/deployment-example.html">http://docs.jboss.org/jbossas/7/plugins/maven/latest/examples/deployment-example.html</a></a> it said</p>

<blockquote>The artifact must be already listed as a dependency in the projects pom.xml</blockquote>


<p>but it do not tells in which scope the driver&rsquo;s JAR have to be: it have to be in <strong>compile</strong> or <strong>runtime</strong> scope in order to work. I had it in provided scope. After changing the scope of dependency it works fine.</p>

<!--more-->


<p>Here is full stacktrace of the error I received:
<code>
[ERROR] Failed to execute goal org.jboss.as.plugins:jboss-as-maven-plugin:7.0.1.Final:deploy-artifact (deploy-driver-AS400) on project project-ear: Execution deploy-driver-AS400 of goal org.jboss.as.plugins:jboss-as-maven-plugin:7.0.1.Final:deploy-artifact failed. NullPointerException -&gt; [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.jboss.as.plugins:jboss-as-maven-plugin:7.0.1.Final:deploy-artifact (deploy-driver-AS400) on project project-ear: Execution deploy-driver-AS400 of goal org.jboss.as.plugins:jboss-as-maven-plugin:7.0.1.Final:deploy-artifact failed.
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
at org.apache.maven.cli.MavenCli.execute(MavenCli.java:534)
at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution deploy-driver-AS400 of goal org.jboss.as.plugins:jboss-as-maven-plugin:7.0.1.Final:deploy-artifact failed.
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:116)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
... 19 more
Caused by: java.lang.NullPointerException
at org.jboss.as.plugin.deployment.AbstractDeployment.execute(AbstractDeployment.java:191)
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:107)
... 20 more
</code></p>
]]></content>
  </entry>
  
</feed>
